--- a/tools/env/fw_env.c	2018-02-01 15:24:28.235718421 -0800
+++ b/tools/env/fw_env.c	2018-02-02 10:58:41.242953688 -0800
@@ -203,7 +203,7 @@ int fw_printenv (int argc, char *argv[])
 	int i, n_flag;
 	int rc = 0;

-	if (fw_env_open())
+	if (fw_env_open(NULL))
 		return -1;

 	if (argc == 1) {		/* Print all env variables  */
@@ -218,6 +218,7 @@ int fw_printenv (int argc, char *argv[])

 			printf ("%s\n", env);
 		}
+		fw_env_close(NULL);
 		return 0;
 	}

@@ -263,10 +264,11 @@ int fw_printenv (int argc, char *argv[])
 		}
 	}

+	fw_env_close(NULL);
 	return rc;
 }

-int fw_env_close(void)
+int fw_env_flush(struct env_opts *opts)
 {
 	/*
 	 * Update CRC
@@ -283,6 +285,15 @@ int fw_env_close(void)
 	return 0;
 }

+int fw_env_close(struct env_opts *opts)
+{
+	if (environment.image)
+		free(environment.image);
+
+	environment.image = NULL;
+
+	return 0;
+}

 /*
  * Set/Clear a single variable in the environment.
@@ -419,21 +430,24 @@ int fw_setenv(int argc, char *argv[])
 	size_t len;
 	char *name;
 	char *value = NULL;
+	int ret;

 	if (argc < 2) {
 		errno = EINVAL;
 		return -1;
 	}

-	if (fw_env_open()) {
+	if (fw_env_open(NULL)) {
 		fprintf(stderr, "Error: environment not initialized\n");
 		return -1;
 	}

 	name = argv[1];

-	if (env_flags_validate_env_set_params(argc, argv) < 0)
-		return 1;
+	if (env_flags_validate_env_set_params(argc, argv) < 0) {
+		fw_env_close(NULL);
+		return -1;
+	}

 	len = 0;
 	for (i = 2; i < argc; ++i) {
@@ -459,7 +473,10 @@ int fw_setenv(int argc, char *argv[])

 	free(value);

-	return fw_env_close();
+	ret = fw_env_flush(NULL);
+	fw_env_close(NULL);
+
+	return ret;
 }

 /*
@@ -479,7 +496,7 @@ int fw_setenv(int argc, char *argv[])
  * 0	  - OK
  * -1     - Error
  */
-int fw_parse_script(char *fname)
+int fw_parse_script(char *fname, struct env_opts *opts)
 {
 	FILE *fp;
 	char dump[1024];	/* Maximum line length in the file */
@@ -489,7 +506,7 @@ int fw_parse_script(char *fname)
 	int len;
 	int ret = 0;

-	if (fw_env_open()) {
+	if (fw_env_open(NULL)) {
 		fprintf(stderr, "Error: environment not initialized\n");
 		return -1;
 	}
@@ -579,7 +596,9 @@ int fw_parse_script(char *fname)
 	if (strcmp(fname, "-") != 0)
 		fclose(fp);

-	ret |= fw_env_close();
+	ret |= fw_env_flush(NULL);
+
+	fw_env_close(NULL);

 	return ret;

@@ -1067,7 +1086,7 @@ static char *envmatch (char * s1, char *
 /*
  * Prevent confusion if running from erased flash memory
  */
-int fw_env_open(void)
+int fw_env_open(struct env_opts *opts)
 {
 	int crc0, crc0_ok;
 	unsigned char flag0;

--- a/tools/env/fw_env.h	2018-02-01 15:24:27.267718431 -0800
+++ b/tools/env/fw_env.h	2018-02-02 10:46:41.802961497 -0800
@@ -55,9 +55,28 @@
 extern int   fw_printenv(int argc, char *argv[]);
 extern char *fw_getenv  (char *name);
 extern int fw_setenv  (int argc, char *argv[]);
-extern int fw_parse_script(char *fname);
-extern int fw_env_open(void);
 extern int fw_env_write(char *name, char *value);
-extern int fw_env_close(void);
+
+/*------------------------------------------------------*/
+/* backport structs and function definitions from later
+ * u-boot versions to make this compatible with swupdate
+ * (which relies on libubootenv.a)
+ */
+
+#define AES_KEY_LENGTH  (128 / 8)
+
+struct env_opts {
+        char *config_file;
+        int aes_flag; /* Is AES encryption used? */
+        char aes_key[AES_KEY_LENGTH];
+};
+
+
+extern int fw_parse_script(char *fname, struct env_opts *opts);
+extern int fw_env_open(struct env_opts *opts);
+extern int fw_env_close(struct env_opts *opts);
+extern int fw_env_flush(struct env_opts *opts);
+
+/*------------------------------------------------------*/

 extern unsigned	long  crc32	 (unsigned long, const unsigned char *, unsigned);

--- a/tools/env/fw_env_main.c	2018-02-01 15:24:27.267718431 -0800
+++ b/tools/env/fw_env_main.c	2018-02-02 10:36:12.986968323 -0800
@@ -122,7 +122,7 @@ int main(int argc, char *argv[])
 			if (fw_setenv(argc, argv) != 0)
 				retval = EXIT_FAILURE;
 		} else {
-			if (fw_parse_script(script_file) != 0)
+			if (fw_parse_script(script_file, NULL) != 0)
 				retval = EXIT_FAILURE;
 		}
 	} else {
